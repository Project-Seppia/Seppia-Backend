package com.seppia.action;

import java.util.ArrayList;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

import com.google.gson.*;
import com.google.maps.*;
import com.google.maps.model.PlacesSearchResponse;
import com.google.maps.model.PlacesSearchResult;
import com.seppia.util.Utility;
import com.seppia.model.*;
import com.seppia.dao.*;

public class LocationFetcher {
	
	public Boolean fetchLocationsByQuery(String query) throws Exception{
		GeoApiContext context = new GeoApiContext().setApiKey(Constants.mapAPIKey);
		TextSearchRequest request =  PlacesApi.textSearchQuery(context, query);
		try{
			PlacesSearchResponse response = request.await();
			PlacesSearchResult[] results = response.results;
			//loop through to get results.
			for(PlacesSearchResult result : results){
				LocationFetched fetchedLocation = this.transferResulttoLocationFetched(result);
				Location location = this.transferLocationFechted(fetchedLocation);
				if(this.addLocationToLocationTable(location)){
					continue;
				}
				else{
					return false;
				}
				
			}
			return true;
		} catch (Exception e){
			throw e;
		}
		
	}
	
	private Location transferLocationFechted(LocationFetched fetchedLocation){
		Location location = new Location();
		location.setAddress(fetchedLocation.getAddress());
		location.setName(fetchedLocation.getName());
		location.setPhone(fetchedLocation.getPhone());
		
		//TODO need Photo DBs
		return location;
	}
	
	private LocationFetched transferResulttoLocationFetched(PlacesSearchResult result){
		LocationFetched location = new LocationFetched();
		location.setAddress(result.formattedAddress);
		Geometry geo = new Geometry();
		geo.setLat(result.geometry.location.lat);
		geo.setLng(result.geometry.location.lng);
		location.setGeometry(geo);
		location.setgPlaceID(result.placeId);
		location.setName(result.name);
		location.setVicinity(result.vicinity);
		location.setIcon(result.icon);
		//seems like the contact is not the primary information.
		location.setPhone("123456789");
		//TODO 1)Photos
		location.setType(result.types);
		location.setOpeningTimeInSevenDays(result.openingHours.weekdayText);
		
		return location;
	}
	
	public Boolean saveLocationFetchedToFile(LocationFetched locationFetched){
		//TODO: save it to file
		return true;
	}
	
	private Boolean addLocationToLocationTable(Location location){
		//call location db function, just a wrapper
		//indicate auto creation by adding column boolean isAutoGenerated
		return true;
	}
}
